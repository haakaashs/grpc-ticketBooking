// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/ticketBooking/ticket.proto

package ticketBooking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketBookingServiceClient is the client API for TicketBookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketBookingServiceClient interface {
	CreateReceipt(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*Message, error)
	ReadReceiptByUserEmail(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Receipt, error)
	ReadUsersAndSeatsBySection(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UsersSeats, error)
	DeleteUserByEmail(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	UpdateSeatByEmail(ctx context.Context, in *UpdateSeat, opts ...grpc.CallOption) (*Message, error)
}

type ticketBookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketBookingServiceClient(cc grpc.ClientConnInterface) TicketBookingServiceClient {
	return &ticketBookingServiceClient{cc}
}

func (c *ticketBookingServiceClient) CreateReceipt(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tickerBooking.ticketBookingService/CreateReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) ReadReceiptByUserEmail(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/tickerBooking.ticketBookingService/ReadReceiptByUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) ReadUsersAndSeatsBySection(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UsersSeats, error) {
	out := new(UsersSeats)
	err := c.cc.Invoke(ctx, "/tickerBooking.ticketBookingService/ReadUsersAndSeatsBySection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) DeleteUserByEmail(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tickerBooking.ticketBookingService/DeleteUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) UpdateSeatByEmail(ctx context.Context, in *UpdateSeat, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tickerBooking.ticketBookingService/UpdateSeatByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketBookingServiceServer is the server API for TicketBookingService service.
// All implementations must embed UnimplementedTicketBookingServiceServer
// for forward compatibility
type TicketBookingServiceServer interface {
	CreateReceipt(context.Context, *Receipt) (*Message, error)
	ReadReceiptByUserEmail(context.Context, *Message) (*Receipt, error)
	ReadUsersAndSeatsBySection(context.Context, *Message) (*UsersSeats, error)
	DeleteUserByEmail(context.Context, *Message) (*Message, error)
	UpdateSeatByEmail(context.Context, *UpdateSeat) (*Message, error)
	mustEmbedUnimplementedTicketBookingServiceServer()
}

// UnimplementedTicketBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketBookingServiceServer struct {
}

func (UnimplementedTicketBookingServiceServer) CreateReceipt(context.Context, *Receipt) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceipt not implemented")
}
func (UnimplementedTicketBookingServiceServer) ReadReceiptByUserEmail(context.Context, *Message) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadReceiptByUserEmail not implemented")
}
func (UnimplementedTicketBookingServiceServer) ReadUsersAndSeatsBySection(context.Context, *Message) (*UsersSeats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUsersAndSeatsBySection not implemented")
}
func (UnimplementedTicketBookingServiceServer) DeleteUserByEmail(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByEmail not implemented")
}
func (UnimplementedTicketBookingServiceServer) UpdateSeatByEmail(context.Context, *UpdateSeat) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatByEmail not implemented")
}
func (UnimplementedTicketBookingServiceServer) mustEmbedUnimplementedTicketBookingServiceServer() {}

// UnsafeTicketBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketBookingServiceServer will
// result in compilation errors.
type UnsafeTicketBookingServiceServer interface {
	mustEmbedUnimplementedTicketBookingServiceServer()
}

func RegisterTicketBookingServiceServer(s grpc.ServiceRegistrar, srv TicketBookingServiceServer) {
	s.RegisterService(&TicketBookingService_ServiceDesc, srv)
}

func _TicketBookingService_CreateReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).CreateReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerBooking.ticketBookingService/CreateReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).CreateReceipt(ctx, req.(*Receipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_ReadReceiptByUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).ReadReceiptByUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerBooking.ticketBookingService/ReadReceiptByUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).ReadReceiptByUserEmail(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_ReadUsersAndSeatsBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).ReadUsersAndSeatsBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerBooking.ticketBookingService/ReadUsersAndSeatsBySection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).ReadUsersAndSeatsBySection(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_DeleteUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).DeleteUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerBooking.ticketBookingService/DeleteUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).DeleteUserByEmail(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_UpdateSeatByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).UpdateSeatByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerBooking.ticketBookingService/UpdateSeatByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).UpdateSeatByEmail(ctx, req.(*UpdateSeat))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketBookingService_ServiceDesc is the grpc.ServiceDesc for TicketBookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketBookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tickerBooking.ticketBookingService",
	HandlerType: (*TicketBookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReceipt",
			Handler:    _TicketBookingService_CreateReceipt_Handler,
		},
		{
			MethodName: "ReadReceiptByUserEmail",
			Handler:    _TicketBookingService_ReadReceiptByUserEmail_Handler,
		},
		{
			MethodName: "ReadUsersAndSeatsBySection",
			Handler:    _TicketBookingService_ReadUsersAndSeatsBySection_Handler,
		},
		{
			MethodName: "DeleteUserByEmail",
			Handler:    _TicketBookingService_DeleteUserByEmail_Handler,
		},
		{
			MethodName: "UpdateSeatByEmail",
			Handler:    _TicketBookingService_UpdateSeatByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ticketBooking/ticket.proto",
}
